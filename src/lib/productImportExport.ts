import ExcelJS from "exceljs";
import { parse } from "csv-parse/sync";
import { stringify } from "csv-stringify/sync";
import type { ProductCatalogItem } from "@/lib/supabaseProducts";

// CSV/Excel column headers
const PRODUCT_HEADERS = {
  code: "‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  name: "‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
  description: "‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢",
  isActive: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
  unitName: "‡∏´‡∏ô‡πà‡∏ß‡∏¢",
  unitSku: "SKU",
  unitIsBase: "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô",
  unitMultiplier: "‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì",
};

export type ProductImportRow = {
  code: string;
  name: string;
  description?: string;
  isActive: boolean;
  units: Array<{
    name: string;
    sku?: string;
    isBase: boolean;
    multiplierToBase: number;
  }>;
};

/**
 * Parse CSV content into product import data
 */
export function parseProductsCsv(csvContent: string): ProductImportRow[] {
  const records = parse(csvContent, {
    columns: true,
    skip_empty_lines: true,
    trim: true,
    bom: true, // Handle UTF-8 BOM
  }) as Array<Record<string, string>>;

  const productsMap = new Map<string, ProductImportRow>();

  for (const record of records) {
    const code = record[PRODUCT_HEADERS.code]?.trim();
    const name = record[PRODUCT_HEADERS.name]?.trim();
    const description = record[PRODUCT_HEADERS.description]?.trim() || undefined;
    const isActive = record[PRODUCT_HEADERS.isActive]?.trim().toLowerCase() !== "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
    const unitName = record[PRODUCT_HEADERS.unitName]?.trim();
    const unitSku = record[PRODUCT_HEADERS.unitSku]?.trim() || undefined;
    const unitIsBase = record[PRODUCT_HEADERS.unitIsBase]?.trim().toLowerCase() === "‡πÉ‡∏ä‡πà";
    const unitMultiplier = parseFloat(record[PRODUCT_HEADERS.unitMultiplier] || "1");

    if (!code || !name || !unitName) {
      continue; // Skip invalid rows
    }

    let product = productsMap.get(code);
    if (!product) {
      product = {
        code,
        name,
        description,
        isActive,
        units: [],
      };
      productsMap.set(code, product);
    }

    // Add unit
    product.units.push({
      name: unitName,
      sku: unitSku,
      isBase: unitIsBase,
      multiplierToBase: unitMultiplier,
    });
  }

  return Array.from(productsMap.values());
}

/**
 * Parse Excel workbook into product import data
 */
export async function parseProductsExcel(buffer: ArrayBuffer): Promise<ProductImportRow[]> {
  const workbook = new ExcelJS.Workbook();
  await workbook.xlsx.load(buffer);

  const worksheet = workbook.getWorksheet(1);
  if (!worksheet) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö worksheet ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel");
  }

  const productsMap = new Map<string, ProductImportRow>();

  worksheet.eachRow((row, rowNumber) => {
    if (rowNumber === 1) return; // Skip header row

    const code = row.getCell(1).text.trim();
    const name = row.getCell(2).text.trim();
    const description = row.getCell(3).text.trim() || undefined;
    const isActiveText = row.getCell(4).text.trim().toLowerCase();
    const isActive = isActiveText !== "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô";
    const unitName = row.getCell(5).text.trim();
    const unitSku = row.getCell(6).text.trim() || undefined;
    const unitIsBaseText = row.getCell(7).text.trim().toLowerCase();
    const unitIsBase = unitIsBaseText === "‡πÉ‡∏ä‡πà";
    const unitMultiplier = parseFloat(row.getCell(8).text) || 1;

    if (!code || !name || !unitName) {
      return; // Skip invalid rows
    }

    let product = productsMap.get(code);
    if (!product) {
      product = {
        code,
        name,
        description,
        isActive,
        units: [],
      };
      productsMap.set(code, product);
    }

    // Add unit
    product.units.push({
      name: unitName,
      sku: unitSku,
      isBase: unitIsBase,
      multiplierToBase: unitMultiplier,
    });
  });

  return Array.from(productsMap.values());
}

/**
 * Export products to CSV format with UTF-8 BOM
 */
export function exportProductsCsv(products: ProductCatalogItem[]): string {
  const rows: Record<string, string | number | boolean>[] = [];

  for (const product of products) {
    for (const unit of product.units) {
      rows.push({
        [PRODUCT_HEADERS.code]: product.code,
        [PRODUCT_HEADERS.name]: product.name,
        [PRODUCT_HEADERS.description]: product.description || "",
        [PRODUCT_HEADERS.isActive]: product.isActive ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        [PRODUCT_HEADERS.unitName]: unit.name,
        [PRODUCT_HEADERS.unitSku]: unit.sku || "",
        [PRODUCT_HEADERS.unitIsBase]: unit.isBase ? "‡πÉ‡∏ä‡πà" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
        [PRODUCT_HEADERS.unitMultiplier]: unit.multiplierToBase,
      });
    }
  }

  // Add UTF-8 BOM prefix
  const csv = stringify(rows, {
    header: true,
    columns: Object.values(PRODUCT_HEADERS),
    bom: true,
  });

  return "\uFEFF" + csv; // UTF-8 BOM
}

/**
 * Export products to Excel format with enhanced template
 * Features:
 * - Instructions sheet with usage guide
 * - Example sheet with sample data
 * - Data validation (dropdowns) for consistent input
 * - Color-coded required fields
 * - Frozen header row and auto-filter
 * - Cell comments for guidance
 */
export async function exportProductsExcel(products: ProductCatalogItem[]): Promise<ArrayBuffer> {
  const workbook = new ExcelJS.Workbook();

  // ========================================
  // Sheet 1: ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (Instructions)
  // ========================================
  const instructionsSheet = workbook.addWorksheet("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥", {
    views: [{ state: "frozen", ySplit: 0 }],
  });

  instructionsSheet.columns = [
    { width: 60 },
  ];

  // Title
  const titleRow = instructionsSheet.addRow(["üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Template ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"]);
  titleRow.font = { size: 16, bold: true, color: { argb: "FF1E40AF" } };
  titleRow.height = 30;
  instructionsSheet.mergeCells("A1:A1");

  instructionsSheet.addRow([""]);

  // Instructions content
  const instructions = [
    "üîπ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:",
    "  1. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
    "  2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
    "  3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'",
    "  4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö",
    "",
    "üîπ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå:",
    "  ‚Ä¢ ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (*): ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô P001, COFFEE-01)",
    "  ‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (*): ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°, ‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ)",
    "  ‚Ä¢ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
    "  ‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (*): ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown ‚Üí ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    "  ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢ (*): ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏•‡πà‡∏≠‡∏á, ‡πÅ‡∏û‡πá‡∏Ñ, ‡∏Ç‡∏ß‡∏î)",
    "  ‚Ä¢ SKU: ‡∏£‡∏´‡∏±‡∏™ SKU ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡πâ‡∏ô‡πÜ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)",
    "  ‚Ä¢ ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô (*): ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown ‚Üí ‡πÉ‡∏ä‡πà (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
    "  ‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì (*): ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á = 12 ‡∏Ç‡∏ß‡∏î ‚Üí ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì = 12)",
    "",
    "üîπ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:",
    "  ‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ (*) ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å",
    "  ‚ö†Ô∏è ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    "  ‚ö†Ô∏è ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏´‡∏ô‡πà‡∏ß‡∏¢ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô",
    "  ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ dropdown ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
    "",
    "üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å (‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ 3 ‡∏´‡∏ô‡πà‡∏ß‡∏¢):",
    "  C001 | ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏° | ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡∏ß‡∏î | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô | ‡∏Å‡∏•‡πà‡∏≠‡∏á | BOX-001 | ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà | 24",
    "  C001 | ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏° | ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡∏ß‡∏î | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô | ‡πÅ‡∏û‡πá‡∏Ñ | PACK-001 | ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà | 6",
    "  C001 | ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏° | ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡∏ß‡∏î | ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô | ‡∏Ç‡∏ß‡∏î | BOTTLE-001 | ‡πÉ‡∏ä‡πà | 1",
    "",
    "üí° ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢ IT Support",
  ];

  for (const line of instructions) {
    const row = instructionsSheet.addRow([line]);
    if (line.startsWith("üîπ")) {
      row.font = { bold: true, size: 12, color: { argb: "FF1E293B" } };
    } else if (line.startsWith("  ‚Ä¢") || line.startsWith("  ‚ö†Ô∏è")) {
      row.font = { size: 11, color: { argb: "FF475569" } };
    } else {
      row.font = { size: 10, color: { argb: "FF64748B" } };
    }
    row.alignment = { wrapText: true, vertical: "top" };
  }

  // ========================================
  // Sheet 2: ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (Example)
  // ========================================
  const exampleSheet = workbook.addWorksheet("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á");

  exampleSheet.columns = [
    { header: PRODUCT_HEADERS.code, key: "code", width: 15 },
    { header: PRODUCT_HEADERS.name, key: "name", width: 30 },
    { header: PRODUCT_HEADERS.description, key: "description", width: 40 },
    { header: PRODUCT_HEADERS.isActive, key: "isActive", width: 15 },
    { header: PRODUCT_HEADERS.unitName, key: "unitName", width: 15 },
    { header: PRODUCT_HEADERS.unitSku, key: "unitSku", width: 15 },
    { header: PRODUCT_HEADERS.unitIsBase, key: "unitIsBase", width: 12 },
    { header: PRODUCT_HEADERS.unitMultiplier, key: "unitMultiplier", width: 12 },
  ];

  // Style header
  exampleSheet.getRow(1).font = { bold: true, size: 11 };
  exampleSheet.getRow(1).fill = {
    type: "pattern",
    pattern: "solid",
    fgColor: { argb: "FF3B82F6" },
  };
  exampleSheet.getRow(1).font = { bold: true, color: { argb: "FFFFFFFF" } };
  exampleSheet.getRow(1).alignment = { horizontal: "center", vertical: "middle" };

  // Example data
  const exampleData = [
    {
      code: "C001",
      name: "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°",
      description: "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡∏ß‡∏î 600ml",
      isActive: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      unitName: "‡∏Å‡∏•‡πà‡∏≠‡∏á",
      unitSku: "BOX-001",
      unitIsBase: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
      unitMultiplier: 24,
    },
    {
      code: "C001",
      name: "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°",
      description: "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡∏ß‡∏î 600ml",
      isActive: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      unitName: "‡πÅ‡∏û‡πá‡∏Ñ",
      unitSku: "PACK-001",
      unitIsBase: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
      unitMultiplier: 6,
    },
    {
      code: "C001",
      name: "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°",
      description: "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°‡∏ö‡∏£‡∏£‡∏à‡∏∏‡∏Ç‡∏ß‡∏î 600ml",
      isActive: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      unitName: "‡∏Ç‡∏ß‡∏î",
      unitSku: "BOTTLE-001",
      unitIsBase: "‡πÉ‡∏ä‡πà",
      unitMultiplier: 1,
    },
    {
      code: "C002",
      name: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ",
      description: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ 3in1",
      isActive: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      unitName: "‡∏•‡∏±‡∏á",
      unitSku: "CRATE-002",
      unitIsBase: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
      unitMultiplier: 240,
    },
    {
      code: "C002",
      name: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ",
      description: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ 3in1",
      isActive: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      unitName: "‡∏Å‡∏•‡πà‡∏≠‡∏á",
      unitSku: "BOX-002",
      unitIsBase: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
      unitMultiplier: 20,
    },
    {
      code: "C002",
      name: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ",
      description: "‡∏Å‡∏≤‡πÅ‡∏ü‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ 3in1",
      isActive: "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      unitName: "‡∏ã‡∏≠‡∏á",
      unitSku: "SACHET-002",
      unitIsBase: "‡πÉ‡∏ä‡πà",
      unitMultiplier: 1,
    },
  ];

  for (const data of exampleData) {
    exampleSheet.addRow(data);
  }

  // Freeze header
  exampleSheet.views = [{ state: "frozen", ySplit: 1 }];

  // ========================================
  // Sheet 3: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (Data)
  // ========================================
  const worksheet = workbook.addWorksheet("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");

  worksheet.columns = [
    { header: PRODUCT_HEADERS.code, key: "code", width: 18 },
    { header: PRODUCT_HEADERS.name, key: "name", width: 32 },
    { header: PRODUCT_HEADERS.description, key: "description", width: 42 },
    { header: PRODUCT_HEADERS.isActive, key: "isActive", width: 15 },
    { header: PRODUCT_HEADERS.unitName, key: "unitName", width: 18 },
    { header: PRODUCT_HEADERS.unitSku, key: "unitSku", width: 18 },
    { header: PRODUCT_HEADERS.unitIsBase, key: "unitIsBase", width: 14 },
    { header: PRODUCT_HEADERS.unitMultiplier, key: "unitMultiplier", width: 14 },
  ];

  // Style header row
  const headerRow = worksheet.getRow(1);
  headerRow.font = { bold: true, size: 11, color: { argb: "FFFFFFFF" } };
  headerRow.fill = {
    type: "pattern",
    pattern: "solid",
    fgColor: { argb: "FF1E40AF" }, // Blue
  };
  headerRow.alignment = { horizontal: "center", vertical: "middle" };
  headerRow.height = 25;

  // Add cell comments to headers
  worksheet.getCell("A1").note = {
    texts: [{ text: "‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n‡∏´‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô\n‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å" }],
  };
  worksheet.getCell("B1").note = {
    texts: [{ text: "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤\n‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å" }],
  };
  worksheet.getCell("C1").note = {
    texts: [{ text: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n‚ö™ ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö" }],
  };
  worksheet.getCell("D1").note = {
    texts: [{ text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown\n‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å" }],
  };
  worksheet.getCell("E1").note = {
    texts: [{ text: "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≤‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏•‡πà‡∏≠‡∏á, ‡πÅ‡∏û‡πá‡∏Ñ)\n‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å" }],
  };
  worksheet.getCell("F1").note = {
    texts: [{ text: "‡∏£‡∏´‡∏±‡∏™ SKU ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢\n‚ö™ ‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö" }],
  };
  worksheet.getCell("G1").note = {
    texts: [{ text: "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown\n‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô = ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î\n‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å" }],
  };
  worksheet.getCell("H1").note = {
    texts: [{ text: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô‡πÉ‡∏ô 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏µ‡πâ\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: 1 ‡∏Å‡∏•‡πà‡∏≠‡∏á = 12 ‡∏Ç‡∏ß‡∏î\n‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å" }],
  };

  // Color-code required fields (yellow background)
  const requiredColumns = [1, 2, 4, 5, 7, 8]; // A, B, D, E, G, H
  for (const colNum of requiredColumns) {
    worksheet.getColumn(colNum).eachCell((cell, rowNumber) => {
      if (rowNumber > 1) {
        cell.fill = {
          type: "pattern",
          pattern: "solid",
          fgColor: { argb: "FFFFE082" }, // Light yellow
        };
        cell.border = {
          top: { style: "thin", color: { argb: "FFE0E0E0" } },
          left: { style: "thin", color: { argb: "FFE0E0E0" } },
          bottom: { style: "thin", color: { argb: "FFE0E0E0" } },
          right: { style: "thin", color: { argb: "FFE0E0E0" } },
        };
      }
    });
  }

  // Add existing data rows
  for (const product of products) {
    for (const unit of product.units) {
      worksheet.addRow({
        code: product.code,
        name: product.name,
        description: product.description || "",
        isActive: product.isActive ? "‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        unitName: unit.name,
        unitSku: unit.sku || "",
        unitIsBase: unit.isBase ? "‡πÉ‡∏ä‡πà" : "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
        unitMultiplier: unit.multiplierToBase,
      });
    }
  }

  // Add data validation (Dropdown) for column D (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
  worksheet.getColumn(4).eachCell((cell, rowNumber) => {
    if (rowNumber > 1) {
      cell.dataValidation = {
        type: "list",
        allowBlank: false,
        formulae: ['"‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô,‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"'],
        showErrorMessage: true,
        errorStyle: "error",
        errorTitle: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
      };
    }
  });

  // Add data validation (Dropdown) for column G (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô)
  worksheet.getColumn(7).eachCell((cell, rowNumber) => {
    if (rowNumber > 1) {
      cell.dataValidation = {
        type: "list",
        allowBlank: false,
        formulae: ['"‡πÉ‡∏ä‡πà,‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà"'],
        showErrorMessage: true,
        errorStyle: "error",
        errorTitle: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å dropdown: ‡πÉ‡∏ä‡πà ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà",
      };
    }
  });

  // Add data validation for column H (‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì - must be number > 0)
  worksheet.getColumn(8).eachCell((cell, rowNumber) => {
    if (rowNumber > 1) {
      cell.dataValidation = {
        type: "decimal",
        operator: "greaterThan",
        formulae: [0],
        showErrorMessage: true,
        errorStyle: "error",
        errorTitle: "‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        error: "‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0",
      };
      cell.numFmt = "0.##"; // Number format with up to 2 decimals
    }
  });

  // Freeze header row (‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)
  worksheet.views = [{ state: "frozen", ySplit: 1 }];

  // Enable auto-filter
  worksheet.autoFilter = {
    from: { row: 1, column: 1 },
    to: { row: 1, column: 8 },
  };

  const buffer = await workbook.xlsx.writeBuffer();
  return buffer;
}

/**
 * Validate imported products
 */
export function validateImportedProducts(products: ProductImportRow[]): string[] {
  const errors: string[] = [];

  for (const product of products) {
    // Check required fields
    if (!product.code) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${product.name}": ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`);
    }
    if (!product.name) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏£‡∏´‡∏±‡∏™ "${product.code}": ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`);
    }

    // Check units
    if (product.units.length === 0) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${product.name}" (${product.code}): ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢`);
    }

    // Check base unit
    const baseUnits = product.units.filter((u) => u.isBase);
    if (baseUnits.length === 0) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${product.name}" (${product.code}): ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢`);
    }
    if (baseUnits.length > 1) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${product.name}" (${product.code}): ‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ê‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 1 ‡∏´‡∏ô‡πà‡∏ß‡∏¢`);
    }

    // Check duplicate unit names
    const unitNames = product.units.map((u) => u.name.toLowerCase());
    const uniqueNames = new Set(unitNames);
    if (unitNames.length !== uniqueNames.size) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${product.name}" (${product.code}): ‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô`);
    }

    // Check duplicate SKUs within product
    const skus = product.units.map((u) => u.sku).filter((s) => s);
    const uniqueSkus = new Set(skus);
    if (skus.length !== uniqueSkus.size) {
      errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ "${product.name}" (${product.code}): ‡∏°‡∏µ SKU ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô`);
    }
  }

  return errors;
}
